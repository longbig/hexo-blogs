<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ChatGPT接入个人微信</title>
      <link href="2023/02/12/ChatGPT%E6%8E%A5%E5%85%A5%E4%B8%AA%E4%BA%BA%E5%BE%AE%E4%BF%A1/"/>
      <url>2023/02/12/ChatGPT%E6%8E%A5%E5%85%A5%E4%B8%AA%E4%BA%BA%E5%BE%AE%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="ChatGPT接入个人微信（国内也能正常使用）"><a href="#ChatGPT接入个人微信（国内也能正常使用）" class="headerlink" title="ChatGPT接入个人微信（国内也能正常使用）"></a>ChatGPT接入个人微信（国内也能正常使用）</h1><p>chatGPT最近突然又大火起来了，而且这次不是一般的火，带有浓浓的商业气息火了。各个互联网大厂都开始进军了，感觉要来一场ChatGPT的军备竞赛一样，看看谁先获取国内的地盘。</p><p>作为吃瓜群众，我们也能个人使用ChatGPT，现在小卷来教大家更高级的玩法，就是用个人微信接入ChatGPT，个人微信变成一个聊天机器人，话不多说，先看效果，群聊或者私聊都可以触发</p><p>（最好用微信小号试验，有封号的风险）</p><img src="https://raw.githubusercontent.com/longbig/hexo-blogs/master/source/img/chatgpt/weixin/6.jpeg" style="zoom: 25%;" /><h2 id="1-注册账号"><a href="#1-注册账号" class="headerlink" title="1.注册账号"></a>1.注册账号</h2><p>注册教程看我之前的文章：<a href="https://longbig.github.io/2023/02/12/ChatGPT%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%B3%A8%E5%86%8C%E6%95%99%E7%A8%8B/">ChatGPT保姆级注册教程</a></p><p><strong>如果有不会用梯子的，或是注册困难，或想用现成的账号，可以咨询我啊，提供有偿帮助</strong></p><h2 id="2-创建API-keys"><a href="#2-创建API-keys" class="headerlink" title="2.创建API keys"></a>2.创建API keys</h2><p>账号建好之后，登录openai，并创建一个API keys，这个key非常重要，这个是我们程序访问openai接口必须的</p><p>登录地址：<a href="https://platform.openai.com/login/">https://platform.openai.com/login/</a></p><p>登录之后右上角头像那里点击<code>View API keys</code>进入创建页面</p><img src="https://raw.githubusercontent.com/longbig/hexo-blogs/master/source/img/chatgpt/weixin/1.png" style="zoom:25%;" /><p>到创建界面后，创建一个新的秘钥，注意啊，只有第一次创建的时候可以copy下来。所以我们创建好后直接拷贝到本地，找个地方存着，一会要用</p><p><img src="https://raw.githubusercontent.com/longbig/hexo-blogs/master/source/img/chatgpt/weixin/2.png"></p><h2 id="3-安装部署程序"><a href="#3-安装部署程序" class="headerlink" title="3.安装部署程序"></a>3.安装部署程序</h2><h3 id="3-1准备工作"><a href="#3-1准备工作" class="headerlink" title="3.1准备工作"></a>3.1准备工作</h3><ul><li>自己电脑上安装golang运行环境，程序是用Go语言写的。安装方法可自行百度或Google</li><li>下载程序源码，下载地址：<a href="https://gitee.com/longbig/chatGpt_wechat">https://gitee.com/longbig/chatGpt_wechat</a></li></ul><h3 id="3-2配置修改"><a href="#3-2配置修改" class="headerlink" title="3.2配置修改"></a>3.2配置修改</h3><p>源码下载后，在chatGpt_wechat目录下找到config.json文件，修改配置</p><p><img src="https://raw.githubusercontent.com/longbig/hexo-blogs/master/source/img/chatgpt/weixin/4.png"></p><p>修改内容为将<code>api_key</code>替换为上面自己在openai上创建的API Keys，其他配置无需修改</p><p><img src="https://raw.githubusercontent.com/longbig/hexo-blogs/master/source/img/chatgpt/weixin/4_1.png"></p><h3 id="3-3运行程序"><a href="#3-3运行程序" class="headerlink" title="3.3运行程序"></a>3.3运行程序</h3><p>命令行在chatGpt_wechat目录下，运行main函数，命令如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> run main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token comment">// 或者在项目目录下执行  go build ，编译出可执行程序后，执行可执行程序即可</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>程序运行后，会在命令行窗口出现一个二维码，用微信扫码登录即可。注意微信号需要实名认证啊，扫码的微信号就是聊天机器人</p><p>（先用微信小号进行测试，有封号的麻烦）</p><p><img src="https://raw.githubusercontent.com/longbig/hexo-blogs/master/source/img/chatgpt/weixin/5.png"></p><h3 id="3-4测试效果"><a href="#3-4测试效果" class="headerlink" title="3.4测试效果"></a>3.4测试效果</h3><p>出现登录成功的提示后就可以开始聊天了，如下图是我在微信问机器人的对话以及命令行打印的日志，可以看到无需梯子，能正常使用</p><img src="https://raw.githubusercontent.com/longbig/hexo-blogs/master/source/img/chatgpt/weixin/6.jpeg" style="zoom:25%;" /><p><img src="https://raw.githubusercontent.com/longbig/hexo-blogs/master/source/img/chatgpt/weixin/7.png"></p><h3 id="3-5-相关问题处理"><a href="#3-5-相关问题处理" class="headerlink" title="3.5 相关问题处理"></a>3.5 相关问题处理</h3><p>终止go程序 重新运行后会报一个错</p><p><strong>[WARNING]2023/02/10 20:00:03 logger.go:33: login error: write storage.json: bad file descriptor</strong></p><p>解决方法：</p><p>把chatGpt_wechat目录下的<code>storage.json</code>文件删除，再重新登录即可。</p><h2 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h2><p>欢迎关注我的技术公众号：<strong>卷福同学</strong></p><p>技术文章第一时间会在公众号上发布哦~</p><p><img src="https://raw.githubusercontent.com/longbig/hexo-blogs/master/source/img/wechat/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.jpeg" alt="公众号"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>国内用ChatGPT的方式汇总</title>
      <link href="2023/02/12/%E5%9B%BD%E5%86%85%E7%94%A8ChatGPT%E7%9A%84%E6%96%B9%E5%BC%8F%E6%B1%87%E6%80%BB/"/>
      <url>2023/02/12/%E5%9B%BD%E5%86%85%E7%94%A8ChatGPT%E7%9A%84%E6%96%B9%E5%BC%8F%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="教你用国内网轻松用上ChatGPT"><a href="#教你用国内网轻松用上ChatGPT" class="headerlink" title="教你用国内网轻松用上ChatGPT"></a>教你用国内网轻松用上ChatGPT</h1><p>最近ChatGPT大火呀，小伙伴们是不是在网上看到各种和ChatGPT有趣聊天的截图，奈何自己实力不够，被网络拒之门外，只能眼馋别人的东西。看别人玩，肯定不如自己玩一把舒服的啊。今天小卷就给大家汇总了国内能使用ChatGPT的方法。</p><p>完整文档打开姿势：</p><p><a href="https://pan.baidu.com/s/1a8OfrosxofsRQo3xZJ_2HA?pwd=bqvx">ChatGPT国内使用方式完整文档</a></p><h3 id="1-注册ChatGPT账号"><a href="#1-注册ChatGPT账号" class="headerlink" title="1.注册ChatGPT账号"></a>1.注册ChatGPT账号</h3><p>保姆级教程哦~</p><p>缺点：需要梯子，且香港的梯子无法使用，只能用其他国家的网络，对不会该技术的人非常不友好</p><p>优点：官方网站，直接用ChatGPT，无任何套路</p><h3 id="2-Google浏览器插件"><a href="#2-Google浏览器插件" class="headerlink" title="2. Google浏览器插件"></a>2. Google浏览器插件</h3><p>已知的插件有：</p><ul><li>ChatGPT for Google</li></ul><p>这款插件支持 Chrome / Edge / Firefox 等浏览器，使用也很简单，用谷歌搜索时会在右侧给出chatGPT的回答。插件直接从谷歌商店下载</p><p>优点：无需注册账号，直接可用</p><p>缺点：仍然需要访问外网的梯子</p><p><img src="https://raw.githubusercontent.com/longbig/hexo-blogs/master/source/img/chatgpt/17.png"></p><h3 id="3-国内代理网站"><a href="#3-国内代理网站" class="headerlink" title="3.国内代理网站"></a>3.国内代理网站</h3><p>简单来说，技术人员自行开发的网站，网站通过梯子访问ChatGPT的接口，得到你要的结果，然后返回在网站上展示。这部分网站找了几个，大家可以看着玩玩</p><ul><li>微信小程序：AI问答百科</li><li><a href="http://chat.h2ai.cn/home">http://chat.h2ai.cn/home</a></li><li><a href="https://chat.xixiaoyao.cn/">https://chat.xixiaoyao.cn/</a></li></ul><p>优点：无需任何门槛，直接使用</p><p>缺点：可能某天就没了</p><h2 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h2><p>欢迎关注我的技术公众号：<strong>卷福同学</strong></p><p>技术文章第一时间会在公众号上发布哦~</p><p><img src="https://raw.githubusercontent.com/longbig/hexo-blogs/master/source/img/wechat/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.jpeg" alt="公众号"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ChatGPT保姆级注册教程</title>
      <link href="2023/02/12/ChatGPT%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%B3%A8%E5%86%8C%E6%95%99%E7%A8%8B/"/>
      <url>2023/02/12/ChatGPT%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%B3%A8%E5%86%8C%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="ChatGPT保姆级注册教程"><a href="#ChatGPT保姆级注册教程" class="headerlink" title="ChatGPT保姆级注册教程"></a>ChatGPT保姆级注册教程</h1><p>大家好，我是小卷</p><p>最近几天OpenAI发布的ChatGPT聊天机器人火出天际了，连着上了各个平台的热搜榜。这个聊天机器人最大的特点是模仿人类说话风格同时回答大量问题。</p><p>有人说ChatGPT是真正的人工智能，它不仅能和你聊天，还是写小作文，回答问题，甚至帮你写代码。</p><h2 id="0-ChatGPT可以做什么"><a href="#0-ChatGPT可以做什么" class="headerlink" title="0 ChatGPT可以做什么"></a>0 ChatGPT可以做什么</h2><h3 id="写一封情书"><a href="#写一封情书" class="headerlink" title="写一封情书"></a>写一封情书</h3><p><img src="https://raw.githubusercontent.com/longbig/hexo-blogs/master/source/img/chatgpt/13.png"></p><h3 id="回答各种问题"><a href="#回答各种问题" class="headerlink" title="回答各种问题"></a>回答各种问题</h3><p><img src="https://raw.githubusercontent.com/longbig/hexo-blogs/master/source/img/chatgpt/16.png"></p><h3 id="帮你写代码"><a href="#帮你写代码" class="headerlink" title="帮你写代码"></a>帮你写代码</h3><p><img src="https://raw.githubusercontent.com/longbig/hexo-blogs/master/source/img/chatgpt/15.png"></p><p>当然这里展示的也只是ChatGPT功能的冰山一角，更多好玩的玩法需要大家自己去发现。看到这，你是不是也按捺不住想自己玩一把哦。现在我就来教大家如何注册ChatGPT账号。</p><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h2><p>（1）能访问村外的网络环境</p><p>韩国、新加坡、日本、印度这几个地址最好</p><p>亲测香港是100%不可行的</p><p>（2）国外手机号</p><p>一般人肯定没有，有的话直接跳到步骤4去 OpenAI官网注册就行</p><p>所以我就教大家如何通过第三方接码平台来完成注册（短信费不到2块）</p><p>PS：目前最便宜的注册方式啦</p><h2 id="2-注册第三方接码平台"><a href="#2-注册第三方接码平台" class="headerlink" title="2.注册第三方接码平台"></a>2.注册第三方接码平台</h2><p>（有国外手机号的跳转步骤4哦）</p><p>打开网站：<a href="https://sms-activate.org/cn">https://sms-activate.org/cn</a></p><p><img src="https://raw.githubusercontent.com/longbig/hexo-blogs/master/source/img/chatgpt/1.png"></p><p>点击右上角的注册按钮：</p><p>在注册页面输入自己的邮箱账号，设置密码后提交。会给你的邮箱发一条验证邮件，点击邮件中的链接确认即完成注册。</p><h2 id="3-充值"><a href="#3-充值" class="headerlink" title="3.充值"></a>3.充值</h2><p>支持支付宝付款，充值主要是用于接收验证码</p><p>注册完成后，登录进去，再点击右上角的充值按钮，选择支付宝付款。<strong>我们充值0.2美元就够了</strong></p><p><img src="https://raw.githubusercontent.com/longbig/hexo-blogs/master/source/img/chatgpt/2.png"></p><p>充值完成后，在页面右上角可以看到账户余额</p><p><img src="https://raw.githubusercontent.com/longbig/hexo-blogs/master/source/img/chatgpt/3.png"></p><h2 id="4-注册OpenAI账号"><a href="#4-注册OpenAI账号" class="headerlink" title="4.注册OpenAI账号"></a>4.注册OpenAI账号</h2><p>打开：<a href="https://beta.openai.com/signup%E9%A1%B5%E9%9D%A2%E8%BF%9B%E8%A1%8C%E7%9B%B8%E5%BA%94%E7%9A%84%E8%B4%A6%E5%8F%B7%E6%B3%A8%E5%86%8C">https://beta.openai.com/signup页面进行相应的账号注册</a></p><p>这里注意你的网络环境不能是香港哦，不然会提示不能在当前国家服务</p><ul><li>在打开的页面输入你的邮箱号（国内邮箱也可以），或者有谷歌账号的用谷歌账号注册也可以</li></ul><p><img src="https://raw.githubusercontent.com/longbig/hexo-blogs/master/source/img/chatgpt/4.png"></p><ul><li>输入邮箱号的需要在邮箱收到的邮件内点击验证，然后继续在注册页面填入信息</li></ul><p><img src="https://raw.githubusercontent.com/longbig/hexo-blogs/master/source/img/chatgpt/6.png"></p><h2 id="5-输入验证码"><a href="#5-输入验证码" class="headerlink" title="5.输入验证码"></a>5.输入验证码</h2><p>上一步输入完信息后点击Continue按钮进行手机验证码校验</p><p><img src="https://raw.githubusercontent.com/longbig/hexo-blogs/master/source/img/chatgpt/6_1.png"></p><p>有国外手机号的这一步直接输手机号注册啊。</p><ul><li>没有的，现在就可以用到步骤3里注册的第三方接码平台了。</li></ul><p>在平台左侧搜索 openai，然后在下面国家那里找到Indonesia（印度尼西亚），（亲测现在只有印尼是可用的，从销售量看也是印尼卖的最多了）</p><p>然后加入购物车（这一步就已经买了）</p><p><img src="https://raw.githubusercontent.com/longbig/hexo-blogs/master/source/img/chatgpt/7.png"></p><ul><li>然后等一会出现如下界面</li></ul><p>把这里的手机号拷贝出来，输入到上一步中注册OpenAI的界面上，然后点击 Send code按钮，等待验证码短信发送</p><p><strong>PS：注意购买后的短信有效期是20分钟，需要快速操作哦~</strong></p><p><img src="https://raw.githubusercontent.com/longbig/hexo-blogs/master/source/img/chatgpt/8.png"></p><ul><li>再等一会，平台收到验证码短信后会发出提示音，我们把验证码拷贝出来输入到OpenAI的注册界面即可。如下图所示</li></ul><p><img src="https://raw.githubusercontent.com/longbig/hexo-blogs/master/source/img/chatgpt/10.png"></p><p><img src="https://raw.githubusercontent.com/longbig/hexo-blogs/master/source/img/chatgpt/9.png"></p><ul><li>最后就是注册完成的页面了，这里随便选一个就行</li></ul><p><img src="https://raw.githubusercontent.com/longbig/hexo-blogs/master/source/img/chatgpt/11.png"></p><ul><li>登录体验</li></ul><p>账号注册完成了，但是还不知道从哪里去玩？</p><p>重新登录：<a href="http://chat.openai.com/auth/login">http://chat.openai.com/auth/login</a></p><p>然后访问：<a href="http://chat.openai.com/chat">http://chat.openai.com/chat</a></p><p>这时你就可以开始尽情和机器人聊天了</p><p><img src="https://raw.githubusercontent.com/longbig/hexo-blogs/master/source/img/chatgpt/13.png"></p><h2 id="其他注意"><a href="#其他注意" class="headerlink" title="其他注意"></a>其他注意</h2><p>注意香港的网络是无法注册，也无法使用ChatGPT的</p><h2 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h2><p>欢迎关注我的技术公众号：<strong>卷福同学</strong></p><p>技术文章第一时间会在公众号上发布哦~</p><p><img src="https://raw.githubusercontent.com/longbig/hexo-blogs/master/source/img/wechat/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.jpeg" alt="公众号"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ChatGPT文章汇总</title>
      <link href="2023/02/12/ChatGPT%E6%96%87%E7%AB%A0%E6%B1%87%E6%80%BB/"/>
      <url>2023/02/12/ChatGPT%E6%96%87%E7%AB%A0%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="ChatGPT文章汇总"><a href="#ChatGPT文章汇总" class="headerlink" title="ChatGPT文章汇总"></a>ChatGPT文章汇总</h1><p>最近对ChatGPT的管控变严了，此文用于记录所有关于ChatGPT的相关文档，不定时更新，包括注册和使用教程</p><h3 id="1-注册"><a href="#1-注册" class="headerlink" title="1.注册"></a>1.注册</h3><ul><li><p><a href="https://longbig.github.io/2023/02/12/ChatGPT%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%B3%A8%E5%86%8C%E6%95%99%E7%A8%8B/">[奶奶看了都会]ChatGPT保姆级注册教程</a></p></li><li><p><a href="https://longbig.github.io/2023/02/12/%E5%9B%BD%E5%86%85%E7%94%A8ChatGPT%E7%9A%84%E6%96%B9%E5%BC%8F%E6%B1%87%E6%80%BB/">ChatGPT国内使用方式汇总</a></p></li></ul><h3 id="2-做成聊天机器人"><a href="#2-做成聊天机器人" class="headerlink" title="2.做成聊天机器人"></a>2.做成聊天机器人</h3><ul><li><a href="https://longbig.github.io/2023/02/12/ChatGPT%E6%8E%A5%E5%85%A5%E4%B8%AA%E4%BA%BA%E5%BE%AE%E4%BF%A1/">ChatGPT接入个人微信</a></li></ul><h2 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h2><p>欢迎关注我的技术公众号：<strong>卷福同学</strong></p><p>技术文章第一时间会在公众号上发布哦~</p><p><img src="https://raw.githubusercontent.com/longbig/hexo-blogs/master/source/img/wechat/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.jpeg" alt="公众号"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2分钟教你部署2048小游戏到云服务器上</title>
      <link href="2022/03/27/2%E5%88%86%E9%92%9F%E6%95%99%E4%BD%A0%E9%83%A8%E7%BD%B22048%E5%B0%8F%E6%B8%B8%E6%88%8F%E5%88%B0%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/"/>
      <url>2022/03/27/2%E5%88%86%E9%92%9F%E6%95%99%E4%BD%A0%E9%83%A8%E7%BD%B22048%E5%B0%8F%E6%B8%B8%E6%88%8F%E5%88%B0%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<h2 id="第一步-创建代码仓库"><a href="#第一步-创建代码仓库" class="headerlink" title="第一步 创建代码仓库"></a>第一步 创建代码仓库</h2><p>打开阿里云的云效管理平台Codeup ，地址：<a href="https://codeup.aliyun.com/?spm=a2c6h.13858378.0.0.2064450fbt8M7p&channel=yy_yc_331">https://codeup.aliyun.com?channel=yy_yc_331</a></p><p>添加库 -&gt; 导入代码库 -&gt; URL导入</p><p><img src="https://raw.githubusercontent.com/longbig/hexo-blogs/master/source/img/2048/1.png"></p><p>在URL导入填写界面，输入：<a href="https://code.aliyun.com/flow-example/spring-boot-2048.git%EF%BC%8C%E7%82%B9%E5%87%BB%E7%A1%AE%E5%AE%9A%EF%BC%8C%E8%BF%9B%E5%85%A5%E4%B8%8B%E4%B8%80%E6%AD%A5">https://code.aliyun.com/flow-example/spring-boot-2048.git，点击确定，进入下一步</a></p><p><img src="https://raw.githubusercontent.com/longbig/hexo-blogs/master/source/img/2048/2.png"></p><h2 id="第二步-创建流水线"><a href="#第二步-创建流水线" class="headerlink" title="第二步 创建流水线"></a>第二步 创建流水线</h2><p>点击 创建流水线</p><p><img src="https://raw.githubusercontent.com/longbig/hexo-blogs/master/source/img/2048/3.png"></p><p>选择 2048小游戏体验模板</p><p><img src="https://raw.githubusercontent.com/longbig/hexo-blogs/master/source/img/2048/4.png"></p><h2 id="第三步-主机配置"><a href="#第三步-主机配置" class="headerlink" title="第三步 主机配置"></a>第三步 主机配置</h2><p>流程配置里选主机部署 -&gt; 默认制品 -&gt; 新建主机组</p><p><img src="https://raw.githubusercontent.com/longbig/hexo-blogs/master/source/img/2048/5.png"></p><p>选择主机，这里因为我已经有了其他云厂商的服务器了，所以选自有主机。如果你没弄过服务器，可以选择<strong>免费体验主机</strong>，按提示继续配置即可。因为选的是自有主机，所以需要安装阿里云的agent，将页面提示框里的命令拷贝到你的云服务器执行一遍即可，就能在这个页面看到你新加的主机列表了。</p><p><img src="https://raw.githubusercontent.com/longbig/hexo-blogs/master/source/img/2048/7.png"></p><h2 id="第四步-自动化部署"><a href="#第四步-自动化部署" class="headerlink" title="第四步 自动化部署"></a>第四步 自动化部署</h2><p>配置好主机后，点击右上角的保存并运行即可执行部署</p><p><img src="https://raw.githubusercontent.com/longbig/hexo-blogs/master/source/img/2048/8.png"></p><p>部署完成后，2048小游戏需要在手机上玩哦~</p><p>大家也可以直接扫我的二维码看看游戏效果</p><p><img src="https://raw.githubusercontent.com/longbig/hexo-blogs/master/source/img/2048/9.png"></p><p><img src="https://raw.githubusercontent.com/longbig/hexo-blogs/master/source/img/2048/10.jpeg"></p><h2 id="最后一步"><a href="#最后一步" class="headerlink" title="最后一步"></a>最后一步</h2><p>欢迎关注我的技术公众号：<strong>福音同学</strong></p><p>技术文章第一时间会在公众号上发布哦~</p><p><img src="https://raw.githubusercontent.com/longbig/hexo-blogs/master/source/img/wechat/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.jpeg" alt="公众号"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>高德数据可视化初体验</title>
      <link href="2022/02/07/%E9%AB%98%E5%BE%B7%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
      <url>2022/02/07/%E9%AB%98%E5%BE%B7%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="高德数据可视化初体验"><a href="#高德数据可视化初体验" class="headerlink" title="高德数据可视化初体验"></a>高德数据可视化初体验</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>换了新工作，虽然还是java开发，但是之前搞做在线教育的，现在做地图相关的事。因此，花了些时间学了空间索引相关的内容，后期会写关于空间索引相关的内容，这期写地理数据可视化相关的内容。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p><strong>1.高德开发平台账号</strong></p><p>高德开放平台：<a href="https://lbs.amap.com/">https://lbs.amap.com/</a></p><p>申请账号并在应用管理创建需要的key，如图</p><p><img src="https://raw.githubusercontent.com/longbig/hexo-blogs/master/source/img/02.png" alt="高德应用key"></p><p><strong>2.学习高德JS API文档</strong></p><p>这里我主要关注多边形的展示，所以贴一下矢量图形的链接，有需要的可自行看其他内容<br><a href="https://lbs.amap.com/api/jsapi-v2/guide/overlays/vector-overlay">https://lbs.amap.com/api/jsapi-v2/guide/overlays/vector-overlay</a></p><p>然后，楼主又花了点时间在B站上学了JS基本语法相关的内容，然后就可以动手做了</p><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><h3 id="后端接口"><a href="#后端接口" class="headerlink" title="后端接口"></a>后端接口</h3><p>接口主要提供国内的行政区划数据，即省市区的编码和多边形围栏数据，在网上google找了一个可以用的数据<a href="https://github.com/Civitasv/DataV_GeoJSON%EF%BC%8C%E5%B0%86%E5%8C%BA%E7%BA%A7%E5%88%AB%E7%9A%84json%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%90%E5%87%BA%E6%9D%A5%EF%BC%8C%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E9%87%8C%EF%BC%8C%E8%BF%99%E6%A0%B7%E6%88%91%E4%BB%AC%E5%B0%B1%E6%9C%89%E4%BA%86%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E3%80%82">https://github.com/Civitasv/DataV_GeoJSON，将区级别的json数据解析出来，导入数据库里，这样我们就有了基础数据。</a></p><p>然后提供一个接口，可以返回多边形边界数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/queryByAdcode"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@CrossOrigin</span>    <span class="token keyword">public</span> <span class="token class-name">ShapeListDTO</span> <span class="token function">queryByAdcode</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"adcode"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> adcode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"queryByAdcode,adcode:&#123;&#125;"</span><span class="token punctuation">,</span> adcode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> cityService<span class="token punctuation">.</span><span class="token function">queryByAdcode</span><span class="token punctuation">(</span>adcode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//返回对象数据结构</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShapeListDTO</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> total<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> shape<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><p>前端通过ajax请求后端接口获取数据，然后调高德JS API方法将多边形边界数据在页面上渲染即可</p><p>直接贴代码：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token name">doctype</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>initial-scale=1.0, user-scalable=no, width=device-width<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://a.amap.com/jsapi_demos/static/demo-center/css/demo-center.css<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>地图显示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">html,        body,        #container</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 加载地图JSAPI脚本 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://webapi.amap.com/maps?v=2.0&amp;key=【你申请的key】<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> req <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    req<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"http://127.0.0.1:8080/queryByAdcode?adcode=110000"</span><span class="token punctuation">)</span>    req<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>responseText <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                errorMsg<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'block'</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>                <span class="token keyword">var</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AMap<span class="token punctuation">.</span>Map</span><span class="token punctuation">(</span><span class="token string">'container'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                    viewMode<span class="token operator">:</span> <span class="token string">'3D'</span><span class="token punctuation">,</span> <span class="token comment">// 默认使用 2D 模式，如果希望使用带有俯仰角的 3D 模式，请设置 viewMode: '3D',</span>                    zoom<span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token comment">//初始化地图层级</span>                    center<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">116.397428</span><span class="token punctuation">,</span> <span class="token number">39.90923</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">//初始化地图中心点</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> resp <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> total <span class="token operator">=</span> resp<span class="token punctuation">.</span>total<span class="token punctuation">;</span>                <span class="token keyword">var</span> shapes <span class="token operator">=</span> resp<span class="token punctuation">.</span>shape<span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> total<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">var</span> poly <span class="token operator">=</span> shapes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">var</span> points <span class="token operator">=</span> poly<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> points<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">var</span> pp <span class="token operator">=</span> points<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>pp<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">var</span> polygon1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AMap<span class="token punctuation">.</span>Polygon</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                        path<span class="token operator">:</span> list<span class="token punctuation">,</span>          <span class="token comment">//设置线覆盖物路径</span>                        fillColor<span class="token operator">:</span> <span class="token string">'#42cee0'</span><span class="token punctuation">,</span> <span class="token comment">// 多边形填充颜色</span>                        borderWeight<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment">// 线条宽度，默认为 1</span>                        strokeColor<span class="token operator">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token comment">// 线条颜色</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    map<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>polygon1<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    req<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://raw.githubusercontent.com/longbig/hexo-blogs/master/source/img/03.png"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>我的代码仓库地址，这里只有后端代码：<a href="https://github.com/longbig/LBS-learn">https://github.com/longbig/LBS-learn</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java8的5种线程池</title>
      <link href="2021/05/08/java8%E7%9A%845%E7%A7%8D%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
      <url>2021/05/08/java8%E7%9A%845%E7%A7%8D%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA8的5种线程池"><a href="#JAVA8的5种线程池" class="headerlink" title="JAVA8的5种线程池"></a>JAVA8的5种线程池</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>JAVA1.8版本加了一种newWorkStealingPool，现在共有5种线程池：newSingleThreadPool、newFixedThreadPool、newCachedThreadPool、newScheduledThreadPool、newWorkStealingPool。</p><p>参考：<a href="https://vvcat.blog.csdn.net/article/details/91409942">https://vvcat.blog.csdn.net/article/details/91409942</a></p><p><strong>线程池的创建步骤：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建单核心的线程池</span><span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建固定核心数的线程池，这里核心数 = 2</span><span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建一个按照计划规定执行的线程池，这里核心数 = 2</span><span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建一个自动增长的线程池</span><span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建一个具有抢占式操作的线程池</span><span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newWorkStealingPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>线程池的参数：</strong></p><ul><li><strong>corePoolSize：核心线程数</strong>，当初始化线程池时，会创建核心线程进入等待状态，即使它是空闲的，核心线程也不会被摧毁，从而降低了任务一来时要创建新线程的时间和性能开销；</li><li><strong>maximumPoolSize：最大线程数</strong>，核心线程数都被用完了，那只能重新创建新的线程来执行任务，但是前提是不能超过最大线程数量；</li><li><strong>keepAliveTime：线程存活时间</strong>，除核心线程外被创建的线程可以存活多久，即这些线程完成任务，后面处于空闲状态，一定时间后被销毁；</li><li>unit：存活时间单位；</li><li><strong>workQueue：任务的阻塞队列</strong>，未被执行的任务需要进入队列中排队，队列是FIFO的，等到线程空闲时，再取出里面的任务；</li></ul><h2 id="newSingleThreadPool"><a href="#newSingleThreadPool" class="headerlink" title="newSingleThreadPool"></a>newSingleThreadPool</h2><p>单核心线程池，最大线程数只会有一个，时间为0表示无限的生命，不会被销毁；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FinalizableDelegatedExecutorService</span>        <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>                                <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                                <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="newFixedThreadPool"><a href="#newFixedThreadPool" class="headerlink" title="newFixedThreadPool"></a>newFixedThreadPool</h2><p>核心线程数固定，需要在创建时传入，并且核心线程数就是最大线程数，存活时间无限，不会销毁；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>nThreads<span class="token punctuation">,</span> nThreads<span class="token punctuation">,</span>                                  <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                                  <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="newCachedThreadPool"><a href="#newCachedThreadPool" class="headerlink" title="newCachedThreadPool"></a>newCachedThreadPool</h2><p>可进行缓存的线程池，常用的线程池。它的线程数是无限的，核心线程数为0，默认是存活时间是60s，即空闲60s后被销毁。有2种创建方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span>                                  <span class="token number">60L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>                                  <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果：当线程池中没有空闲线程时，这时有任务过来了，那么会新建线程执行任务。有空闲线程则会复用；</p><h2 id="newScheduledThreadPool"><a href="#newScheduledThreadPool" class="headerlink" title="newScheduledThreadPool"></a>newScheduledThreadPool</h2><p>有计划性的线程池，可设置延迟时间，在给定的延迟时间之后运行，或者周期性的运行。与Timer定时器类似。构造函数：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Creates a new &#123;@code ScheduledThreadPoolExecutor&#125; with the * given core pool size. * * @param corePoolSize the number of threads to keep in the pool, even *        if they are idle, unless &#123;@code allowCoreThreadTimeOut&#125; is set * @throws IllegalArgumentException if &#123;@code corePoolSize &lt; 0&#125; */</span><span class="token keyword">public</span> <span class="token class-name">ScheduledThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> NANOSECONDS<span class="token punctuation">,</span>          <span class="token keyword">new</span> <span class="token class-name">DelayedWorkQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>内部用的延时阻塞队列维护任务进行，线程池并不常用。</p><h2 id="newWorkStealingPool"><a href="#newWorkStealingPool" class="headerlink" title="newWorkStealingPool"></a>newWorkStealingPool</h2><p>抢占式线程池，与其他4种不同，使用的是ForkJoinPool类，构造函数：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Creates a thread pool that maintains enough threads to support * the given parallelism level, and may use multiple queues to * reduce contention. The parallelism level corresponds to the * maximum number of threads actively engaged in, or available to * engage in, task processing. The actual number of threads may * grow and shrink dynamically. A work-stealing pool makes no * guarantees about the order in which submitted tasks are * executed. * * @param parallelism the targeted parallelism level * @return the newly created thread pool * @throws IllegalArgumentException if &#123;@code parallelism &lt;= 0&#125; * @since 1.8 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newWorkStealingPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> parallelism<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinPool</span>        <span class="token punctuation">(</span>parallelism<span class="token punctuation">,</span>         <span class="token class-name">ForkJoinPool</span><span class="token punctuation">.</span>defaultForkJoinWorkerThreadFactory<span class="token punctuation">,</span>         <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它是一个并行的线程池，入参是线程并发的数量，这个线程不会保证任务的顺序执行，哪个线程抢到任务，就由它执行</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>innodb关键特性</title>
      <link href="2021/04/27/innodb%E5%85%B3%E9%94%AE%E7%89%B9%E6%80%A7/"/>
      <url>2021/04/27/innodb%E5%85%B3%E9%94%AE%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="Innodb关键特性"><a href="#Innodb关键特性" class="headerlink" title="Innodb关键特性"></a>Innodb关键特性</h1><h2 id="插入缓冲"><a href="#插入缓冲" class="headerlink" title="插入缓冲"></a>插入缓冲</h2><h3 id="Insert-Buffer"><a href="#Insert-Buffer" class="headerlink" title="Insert Buffer"></a>Insert Buffer</h3><p>概念：对于<strong>非聚集索引的插入或更新操作</strong>，先判断插入的非聚集索引页是否在缓冲池中，在则直接插入。不在，先放入到insert buffer对象中，在一定情况下对insert buffer和辅助索引页子节点merge操作。 （可将多个插入合并到一个操作中，大大提高了对非聚集索引的插入性能）</p><p>使用需要满足2个条件：</p><ul><li>索引是辅助索引</li><li>索引不是唯一的 （因为insert buffer不查找索引页判断插入记录唯一性）</li></ul><p>通过<code>show engine innodb status</code>查看Innodb引擎状态，找到<code>INSERT BUFFER AND ADAPTIVE HASH INDEX</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">-------------------------------------INSERT BUFFER AND ADAPTIVE HASH INDEX-------------------------------------Ibuf: size 1, free list len 0, seg size 2, 0 mergesmerged operations: insert 0, delete mark 0, delete 0discarded operations: insert 0, delete mark 0, delete 0Hash table size 138389, node heap has 0 buffer(s)Hash table size 138389, node heap has 1 buffer(s)Hash table size 138389, node heap has 0 buffer(s)Hash table size 138389, node heap has 1 buffer(s)Hash table size 138389, node heap has 1 buffer(s)Hash table size 138389, node heap has 1 buffer(s)Hash table size 138389, node heap has 1 buffer(s)Hash table size 138389, node heap has 76 buffer(s)0.00 hash searches&#x2F;s, 0.00 non-hash searches&#x2F;s---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="change-buffer"><a href="#change-buffer" class="headerlink" title="change buffer"></a>change buffer</h3><p>Innodb可对DML操作进行缓冲，包括：INSERT、DELETE、UPDATE，对应<code>insert buffer</code>、<code>delete buffer</code>、<code>purge buffer</code>；</p><p>适用对象是：非唯一的辅助索引；</p><p>参数<code>innodb_change_buffering</code>可设置缓冲类型：insert、delete、purges、changes、all等等；</p><p>对一条记录的UPDATE过程：</p><ul><li>先将记录标记已删除  （对应delete buffer，状态的delete mark）</li><li>真正删除记录  （对应purge buffer，状态的delete）</li></ul><h2 id="两次写"><a href="#两次写" class="headerlink" title="两次写"></a>两次写</h2><p>doublewrite用于提升Innodb的数据页可靠性。</p><p>在应用重做日志前，用户需要一个页的副本，当写入失效时，先通过页的副本还原该页，再进行重做，即doublewrite；</p><p><strong>写过程</strong>：在对缓冲池刷脏页时，不是直接写磁盘，而是将脏页复制到内存中的doublewrite buffer，之后doublewrite buffer分2次，每次1MB顺序写入共享表空间的物理磁盘上，最后同步磁盘。</p><h2 id="自适应哈希索引"><a href="#自适应哈希索引" class="headerlink" title="自适应哈希索引"></a>自适应哈希索引</h2><p>Innodb会监控表上个索引页的查询，如果观察到建立哈希索引可以提升性能，Innodb会自己建立哈希索引，即自适应哈希索引（Adaptive Hash Index，AHI）；</p><p>使用要求：</p><ul><li>等值查询</li><li>以该模式访问100次</li><li>页通过该模式访问了N次，N=页中记录/16</li></ul><h2 id="异步IO"><a href="#异步IO" class="headerlink" title="异步IO"></a>异步IO</h2><p>AIO，用户发出一个IO请求后，可直接发下一个IO请求，不用等待响应。AIO还可将多个IO请求merge为1个IO，提高了IOPS性能；</p><h2 id="刷新邻接页"><a href="#刷新邻接页" class="headerlink" title="刷新邻接页"></a>刷新邻接页</h2><p>刷脏页时，Innodb检测该页所在区（extent）的所有页，如果是脏页，一并刷新。固态硬盘已经有很强的IO能力，可关闭该功能；</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql索引基础</title>
      <link href="2021/04/17/mysql%E7%B4%A2%E5%BC%95%E5%9F%BA%E7%A1%80/"/>
      <url>2021/04/17/mysql%E7%B4%A2%E5%BC%95%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="索引常见模型"><a href="#索引常见模型" class="headerlink" title="索引常见模型"></a>索引常见模型</h2><h3 id="三种数据结构"><a href="#三种数据结构" class="headerlink" title="三种数据结构"></a>三种数据结构</h3><ul><li>三种数据结构：哈希表，有序数组，搜索树；</li><li>哈希表结构适用于等值查询的场景</li><li>有序数组适用于静态存储引擎，查询多，改动少；</li><li>二叉搜索树:查找 O(logN)，插入也是O(logN)；</li></ul><h3 id="Innodb的索引模型"><a href="#Innodb的索引模型" class="headerlink" title="Innodb的索引模型"></a>Innodb的索引模型</h3><p>1.每一个索引在 innodb里对应一棵B+树；</p><p>2.根据叶子节点内容分：主键索引和非主键索引：</p><ul><li>主键索引：叶子节点存整行数据；</li><li>非主键索引：叶子节点存主键的值；</li></ul><p>3.<strong>提问：基于主键索引和普通索引的查询有什么区别？</strong></p><ul><li>查询语句：<code>select * from T where ID = 1</code>主键查询方式，只搜索ID这棵B+树；</li><li>查询语句：<code>select * from T where k = 1</code>，普通索引方式，先找k索引B+树，找到对应的ID，再找ID索引树。<strong>回表</strong>； </li></ul><p>4.普通索引的查询会多扫描一棵索引树；</p><p>5.Innodb是一棵N叉树，N的值是1200；</p><p>6.提问：一张没有主键的表，只有1个普通索引，查询时怎么回表？</p><p>   Innodb默认会将RowId作为主键；</p><p>7.思考题：<code>老师你好：之前看过一遍文章，一直有疑惑：一个innoDB引擎的表，数据量非常大，根据二级索引搜索会比主键搜索快，文章阐述的原因是主键索引和数据行在一起，非常大搜索慢，我的疑惑是：通过普通索引找到主键ID后，同样要跑一遍主键索引，还望老师解惑。。。</code></p><ol start="8"><li>B+树的插入可能会引起数据页的分裂，删除可能会引起数据页的合并，二者都是比较重的IO消耗，所以比较好的方式是顺序插入数据，这也是我们一般使用自增主键的原因之一。</li></ol><h3 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h3><p>1.回表：回到主索引树搜索的过程，普通索引的查找就需要；</p><p>2.示例：<code>select ID from T where k between 3 and 5</code>，需要查找的ID在k索引树上已经存在了，可以直接获取结果，不需要回表。简而言之，在<strong>这个查询里索引k已经覆盖了查询需求，称为覆盖索引</strong></p><p>3.<strong>重点：覆盖索引可以减少树的搜索次数，提升查询性能，所以使用覆盖索引是常用的性能优化手段</strong>；</p><p>4.思考通过身份证号去查询姓名，在身份证号建立索引 和 （身份证号、姓名）联合索引对比？</p><p>   使用联合索引可用到覆盖索引，不需要回表查，减少了执行时间</p><h3 id="最左前缀原则"><a href="#最左前缀原则" class="headerlink" title="最左前缀原则"></a>最左前缀原则</h3><p>1.B+ 树这种索引结构，可以利用索引的“最左前缀”，来定位记录，最左前缀可以是联合索引的最左N个字段，也可以是字符串索引的最左M个字符；</p><p>示例，查询（姓名，年龄）联合索引的表，找已张开头的数据<code>where name like &#39;张%&#39;</code>索引仍然有效</p><p>2.联合索引内的字段顺序如何安排？</p><p>   <strong>重点：第一原则，如果通过调整顺序，可以少维护一个索引，那么这个顺序就是优先考虑的</strong>，示例（a, b）联合索引，则不需要在a上建立索引了。</p><p>3.MySQL5.6之后引入了<strong>索引下推</strong>，在索引遍历过程中，对索引包含的字段进行判断，过滤掉不满足条件的记录，减少回表次数；</p><p>4.提问，什么情况下需要重建索引？</p><p>  索引因为删除，或者页分裂等原因，使得数据页有空洞，重建索引会创建新的索引，把数据按顺序插入，使得页面利用率最高。语句：<code>Alter table T engine=Innodb</code></p><p>示例：<code>让我想到了我们线上的一个表, 记录日志用的, 会定期删除过早之前的数据. 最后这个表实际内容的大小才10G, 而他的索引却有30G. 在阿里云控制面板上看,就是占了40G空间. 这可花的是真金白银啊.后来了解到是 InnoDB 这种引擎导致的,虽然删除了表的部分记录,但是它的索引还在, 并未释放.只能是重新建表才能重建索引.</code></p><h3 id="提问F-amp-Q"><a href="#提问F-amp-Q" class="headerlink" title="提问F&amp;Q"></a>提问F&amp;Q</h3><p>1.联合索引的技巧？（覆盖索引，最左前缀原则，索引下推）</p><p>2.<strong>好问题：</strong>老师，下面两条语句有什么区别，为什么都提倡使用2:<br>   <code>1.select * from T where k in(1,2,3,4,5)</code><br>   <code>2.select * from T where k between 1 and 5</code></p><p>   第1个树搜索5次，第2个树搜索1次。</p><h1 id="MySQL基础06-07"><a href="#MySQL基础06-07" class="headerlink" title="MySQL基础06-07"></a>MySQL基础06-07</h1><p>极客时间《MySQL实战45讲》</p><h2 id="锁的分类"><a href="#锁的分类" class="headerlink" title="锁的分类"></a>锁的分类</h2><p><strong>按照加锁范围，分为：全局锁、表级锁、行级锁</strong></p><h3 id="全局锁"><a href="#全局锁" class="headerlink" title="全局锁"></a>全局锁</h3><p>1.对整个数据库实例加锁，MySQL提供了加全局读锁的方法，命令<code>flush tables with read lock</code>（FTWRL），让库处于只读状态；</p><p>2.应用场景：全库逻辑备份；</p><p>3.备份期间不加锁有什么问题？得到的备份库不是一个逻辑时间点的，这个视图是逻辑不一致的；</p><p>4.给整个数据库加只读锁，为什么不用<code>set global readonly=true</code>的方式呢？</p><p> （a.readonly可能用于其他逻辑，比如判断是主库还是从库；b.异常处理机制上，如果客户端发生异常断开，FTWRL方式会自动释放全局锁，而设置readonly的方式，数据库会一直保持改状态）</p><p>5.备份方式，官方自带的逻辑备份工具mysqldump，使用参数<code>--single-transaction</code>时，会启动一个事务，确保拿到一致性视图。</p><h3 id="表级锁"><a href="#表级锁" class="headerlink" title="表级锁"></a>表级锁</h3><p>1.MySQL里有2种表级锁：<strong>表锁、元数据锁</strong>（meta data lock，MDL）</p><p>2.表锁语法<code>lock tables ... read/write</code>，可通过<code>unlock tables</code>主动释放表锁，</p><p>3.lock tables不仅限制别的线程读写，也限制本线程的操作；</p><p>4.MDL锁是系统默认会加的，<strong>作用防止DDL和DML并发的冲突</strong>，保证读写正确性，对一个表做增删改查时，加MDL读锁；对表结构变更时，加MDL写锁；即（MDL不需要显示使用，在访问一个表时自动加上）</p><p>5.MDL直到数据提交才会释放；</p><p>5.<strong>思考：给一个小表加个字段，导致整个库挂了？</strong></p><p>​    原因：先查询，加了MDL读锁，再改表结构，加了MDL写锁，两个事务都没提交，导致后续操作会阻塞，如果客户端重试，库的线程很快爆满。</p><h3 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h3><p>MySQL的行锁由各个存储引擎自己实现，如MyISAM不支持行锁，任何一个更新都会锁住整张表</p><p>两阶段锁协议：Innodb事务中，行锁在需要的时候才加上，需要等到事务结束时才释放，而不是不需要了立刻释放；</p><p><strong>死锁和死锁检测</strong></p><p>并发系统中，不同线程出现循环资源依赖，都在等待其他线程释放资源时，会进入无限等待状态，即死锁。</p><p>死锁有2种策略解决：</p><p>1.进入等待，直到超时，可通过参数<code>innodb_lock_wait_timeout</code>来设置，默认50s；</p><p>2.发起死锁检测，发现死锁后，主动回滚死锁链中的一个事务，使得其他事务能执行，设置参数<code>innodb_deadlock_detect</code>为on开启死锁检测；</p><p><strong>死锁检测带来的问题？</strong></p><p><code>当一个事务被锁，就要看看它所依赖的线程有没有被别人锁住，如此循环，最后判断是否出现循环等待，即死锁</code>。假设1000个线程同时更新同一行，死锁检测的操作就是100万量级的，结果：CPU利用率很高，每秒执行事务却很少。</p><p>上述问题解决方式：</p><p>1.控制并发度（客户端控制可能不太行，因为客户端会有多个，如果有中间件，在中间件控制）</p><p>2.从业务设计上进行优化，将一行的改动逻辑分成多行，减少锁冲突；</p><p><strong>提问：</strong></p><p>1.死锁检测什么时候执行？ 在事务需要加锁访问的行上有锁，才要检测；一致性读不会加锁，故不需要死锁检测；</p><p>2.Innodb行级锁通过锁索引记录实现，如果update的列没建索引，即使update一条记录也会锁整张表吗？</p><p>  （隔离级别是RR，会的；隔离级别是RC，不会，MySQL做了优化的）</p><h2 id="一致性读"><a href="#一致性读" class="headerlink" title="一致性读"></a>一致性读</h2><p>事务查询数据，在这期间，即使数据被改过，但是事务看到的数据结果都是一致的。称为一致性读。</p><p>判断逻辑：</p><p>一个数据版本，对于一个事务视图来说，除了自己的更新总是可见以外，还有3种情况</p><p><code>1.版本未提交，不可见</code></p><p><code>2.版本已提交，但是是在视图创建后提交的，不可见；</code></p><p><code>3.版本已提交，且是在视图创建前提交的，可见;</code></p><p><strong>更新数据都是先读后写的，这个读只能读取当前值，即“当前读”</strong>。（更新和查询的区别）</p><p>例如：事务B执行更新语句，这期间事务C已经更新k=k+1，那么事务B更新时读到的k=2，更新后k=3;</p><p><strong>5.为什么rr能实现可重复读而rc不能,分两种情况</strong><br>(1)快照读的情况下,rr不能更新事务内的up_limit_id,<br>  而rc每次会把up_limit_id更新为快照读之前最新已提交事务的transaction id,则rc不能可重复读<br>(2)当前读的情况下,rr是利用record lock+gap lock来实现的,而rc没有gap,所以rc不能可重复读</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/04/10/hello-world/"/>
      <url>2021/04/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
